vars_namespace = 2                                                      #yet, only logic variables used ==> only one namespace, if variables from multiply ns used ==> change in src-code
startEmulation  =   ["Application.GVLpython.bAutomatic",2]           #Variable-symbol-path, namespace (ns=2;Application.GVLpython.rABC) ==> [Application.GVLpython.rABC, 2]
initDone        =   False
PosMode_Ack_Rot_Tor 			= ["Application.GVLpython.bPosModeAck_Rot_Tor",2]
PosMode_Ack_Rot_Verteidiung 	= ["Application.GVLpython.bPosModeAck_Rot_Verteidigung",2]
PosMode_Ack_Rot_Mittelfeld 		= ["Application.GVLpython.bPosModeAck_Rot_Mittelfeld",2]
PosMode_Ack_Rot_Sturm 			= ["Application.GVLpython.bPosModeAck_Rot_Sturm",2]
PosMode_Ack_Trans_Tor 			= ["Application.GVLpython.bPosModeAck_Trans_Tor",2]
PosMode_Ack_Trans_Verteidiung 	= ["Application.GVLpython.bPosModeAck_Trans_Verteidigung",2]
PosMode_Ack_Trans_Mittelfeld 	= ["Application.GVLpython.bPosModeAck_Trans_Mittelfeld",2]
PosMode_Ack_Trans_Sturm 		= ["Application.GVLpython.bPosModeAck_Trans_Sturm",2]
Axis1_Rot_JogNegative       =       ["Application.GVLpython.bNegative_jog_Rot_Tor",2]
Axis1_Rot_JogPositive       =       ["Application.GVLpython.bPositive_jog_Rot_Tor",2]
ActualPosition_Axis1_Rot    =       ["Application.GVLpython.rActualPosition_Rot_Tor",2]
ActualVelocity_Axis1_Rot    =       ["Application.GVLpython.rActualVelocity_Rot_Tor",2]
Axis1_Rot_lower_limit_vel   =       ["Application.GVLpython.rLimitVelRot",2]
Axis1_Rot_upper_limit_vel   =       ["Application.GVLpython.rLimitVelRot",2]
Axis1_Rot_abs_limit_acc     =       ["Application.GVLpython.rLimitAccRot",2]
Axis1_Trans_JogNegative     =       ["Application.GVLpython.bNegative_jog_Trans_Tor",2]
Axis1_Trans_JogPositive     =       ["Application.GVLpython.bPositive_jog_Trans_Tor",2]
ActualPosition_Axis1_Trans  =       ["Application.GVLpython.rActualPosition_Trans_Tor",2]
ActualVelocity_Axis1_Trans  =       ["Application.GVLpython.rActualVelocity_Trans_Tor",2]
Axis1_Trans_lower_limit_vel =       ["Application.GVLpython.rLimitVelTrans",2]
Axis1_Trans_upper_limit_vel =       ["Application.GVLpython.rLimitVelTrans",2]
Axis1_Trans_abs_limit_acc   =       ["Application.GVLpython.rLimitAccTrans",2]
Axis2_Rot_JogNegative       =       ["Application.GVLpython.bNegative_jog_Rot_Verteidigung",2]
Axis2_Rot_JogPositive       =       ["Application.GVLpython.bPositive_jog_Rot_Verteidigung",2]
ActualPosition_Axis2_Rot    =       ["Application.GVLpython.rActualPosition_Rot_Verteidigung",2]
ActualVelocity_Axis2_Rot    =       ["Application.GVLpython.rActualVelocity_Rot_Verteidigung",2]
Axis2_Rot_lower_limit_vel   =       ["Application.GVLpython.rLimitVelRot",2]
Axis2_Rot_upper_limit_vel   =       ["Application.GVLpython.rLimitVelRot",2]
Axis2_Rot_abs_limit_acc     =       ["Application.GVLpython.rLimitAccRot",2]
Axis2_Trans_JogNegative     =       ["Application.GVLpython.bNegative_jog_Trans_Verteidigung",2]
Axis2_Trans_JogPositive     =       ["Application.GVLpython.bPositive_jog_Trans_Verteidigung",2]
ActualPosition_Axis2_Trans  =       ["Application.GVLpython.rActualPosition_Trans_Verteidigung",2]
ActualVelocity_Axis2_Trans  =       ["Application.GVLpython.rActualVelocity_Trans_Verteidigung",2]
Axis2_Trans_lower_limit_vel =       ["Application.GVLpython.rLimitVelTrans",2]
Axis2_Trans_upper_limit_vel =       ["Application.GVLpython.rLimitVelTrans",2]
Axis2_Trans_abs_limit_acc   =       ["Application.GVLpython.rLimitAccTrans",2]
Axis3_Rot_JogNegative       =       ["Application.GVLpython.bNegative_jog_Rot_Mittelfeld",2]
Axis3_Rot_JogPositive       =       ["Application.GVLpython.bPositive_jog_Rot_Mittelfeld",2]
ActualPosition_Axis3_Rot    =       ["Application.GVLpython.rActualPosition_Rot_Mittelfeld",2]
ActualVelocity_Axis3_Rot    =       ["Application.GVLpython.rActualVelocity_Rot_Mittelfeld",2]
Axis3_Rot_lower_limit_vel   =       ["Application.GVLpython.rLimitVelRot",2]
Axis3_Rot_upper_limit_vel   =       ["Application.GVLpython.rLimitVelRot",2]
Axis3_Rot_abs_limit_acc     =       ["Application.GVLpython.rLimitAccRot",2]
Axis3_Trans_JogNegative     =       ["Application.GVLpython.bNegative_jog_Trans_Mittelfeld",2]
Axis3_Trans_JogPositive     =       ["Application.GVLpython.bPositive_jog_Trans_Mittelfeld",2]
ActualPosition_Axis3_Trans  =       ["Application.GVLpython.rActualPosition_Trans_Mittelfeld",2]
ActualVelocity_Axis3_Trans  =       ["Application.GVLpython.rActualVelocity_Trans_Mittelfeld",2]
Axis3_Trans_lower_limit_vel =       ["Application.GVLpython.rLimitVelTrans",2]
Axis3_Trans_upper_limit_vel =       ["Application.GVLpython.rLimitVelTrans",2]
Axis3_Trans_abs_limit_acc   =       ["Application.GVLpython.rLimitAccTrans",2]
Axis4_Rot_JogNegative       =       ["Application.GVLpython.bNegative_jog_Rot_Sturm",2]
Axis4_Rot_JogPositive       =       ["Application.GVLpython.bPositive_jog_Rot_Sturm",2]
ActualPosition_Axis4_Rot    =       ["Application.GVLpython.rActualPosition_Rot_Sturm",2]
ActualVelocity_Axis4_Rot    =       ["Application.GVLpython.rActualVelocity_Rot_Sturm",2]
Axis4_Rot_lower_limit_vel   =       ["Application.GVLpython.rLimitVelRot",2]
Axis4_Rot_upper_limit_vel   =       ["Application.GVLpython.rLimitVelRot",2]
Axis4_Rot_abs_limit_acc     =       ["Application.GVLpython.rLimitAccRot",2]
Axis4_Trans_JogNegative     =       ["Application.GVLpython.bNegative_jog_Trans_Sturm",2]
Axis4_Trans_JogPositive     =       ["Application.GVLpython.bPositive_jog_Trans_Sturm",2]
ActualPosition_Axis4_Trans  =       ["Application.GVLpython.rActualPosition_Trans_Sturm",2]
ActualVelocity_Axis4_Trans  =       ["Application.GVLpython.rActualVelocity_Trans_Sturm",2]
Axis4_Trans_lower_limit_vel =       ["Application.GVLpython.rLimitVelTrans",2]
Axis4_Trans_upper_limit_vel =       ["Application.GVLpython.rLimitVelTrans",2]
Axis4_Trans_abs_limit_acc   =       ["Application.GVLpython.rLimitAccTrans",2]
AxisRot1        = [Axis1_Rot_JogNegative, Axis1_Rot_JogPositive,ActualPosition_Axis1_Rot,ActualVelocity_Axis1_Rot,Axis1_Rot_lower_limit_vel,Axis1_Rot_upper_limit_vel,Axis1_Rot_abs_limit_acc]
AxisTrans1      = [Axis1_Trans_JogNegative, Axis1_Trans_JogPositive, ActualPosition_Axis1_Trans, ActualVelocity_Axis1_Trans,Axis1_Trans_lower_limit_vel,Axis1_Trans_upper_limit_vel,Axis1_Trans_abs_limit_acc]
Axis1 = [AxisRot1,AxisTrans1]
AxisRot2        = [Axis2_Rot_JogNegative, Axis2_Rot_JogPositive, ActualPosition_Axis2_Rot, ActualVelocity_Axis2_Rot,Axis2_Rot_lower_limit_vel,Axis2_Rot_upper_limit_vel,Axis2_Rot_abs_limit_acc]
AxisTrans2      = [Axis2_Trans_JogNegative,Axis2_Trans_JogPositive, ActualPosition_Axis2_Trans, ActualVelocity_Axis2_Trans,Axis2_Trans_lower_limit_vel,Axis2_Trans_upper_limit_vel,Axis2_Trans_abs_limit_acc]
Axis2 = [AxisRot2,AxisTrans2]
AxisRot3        = [Axis3_Rot_JogNegative, Axis3_Rot_JogPositive, ActualPosition_Axis3_Rot, ActualVelocity_Axis3_Rot,Axis3_Rot_lower_limit_vel,Axis3_Rot_upper_limit_vel,Axis3_Rot_abs_limit_acc]
AxisTrans3      = [Axis3_Trans_JogNegative, Axis3_Trans_JogPositive, ActualPosition_Axis3_Trans, ActualVelocity_Axis3_Trans,Axis3_Trans_lower_limit_vel,Axis3_Trans_upper_limit_vel,Axis3_Trans_abs_limit_acc]
Axis3 = [AxisRot3,AxisTrans3]
AxisRot4        = [Axis4_Rot_JogNegative, Axis4_Rot_JogPositive, ActualPosition_Axis4_Rot, ActualVelocity_Axis4_Rot,Axis4_Rot_lower_limit_vel,Axis4_Rot_upper_limit_vel,Axis4_Rot_abs_limit_acc]
AxisTrans4      = [Axis4_Trans_JogNegative, Axis4_Trans_JogPositive, ActualPosition_Axis4_Trans, ActualVelocity_Axis4_Trans,Axis4_Trans_lower_limit_vel,Axis4_Trans_upper_limit_vel,Axis4_Trans_abs_limit_acc]
Axis4 = [AxisRot4,AxisTrans4]
Axis = [Axis1,Axis2,Axis3,Axis4]

#handler for subscriptions
class SubScriptionHandler(object):
    def datachange_notification(self, node, val, data):
        value = data.monitored_item.Value.Value.Value
        nodeid = data.subscription_data.node.nodeid.Identifier
        timestamp = data.monitored_item.Value.ServerTimestamp
        logging.debug("nodeid: ", nodeid, ";value:",value,";timestamp:",timestamp)
        logging.debug("Subscription",node, val, dir(data.subscription_data.node.nodeid))
        ###Implement your target-method here!####
#end handler for subscriptions




